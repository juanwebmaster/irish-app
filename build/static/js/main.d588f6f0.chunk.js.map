{"version":3,"sources":["redux/reducer/index.jsx","redux/service.jsx","constants/Routes.jsx","constants/History.jsx","components/LoginForm/index.jsx","pages/LoginPage/index.jsx","pages/Dashboard/index.jsx","pages/PendingApps/index.jsx","pages/MainPage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["initialState","app_type","rootReducer","state","store","createStore","Routes","home","signin","signup","pending","createBrowserHistory","LoginForm","LoginPage","className","src","Dashboard","PendingApps","MainPage","exact","path","component","title","App","history","History","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qXAAMA,EAAe,CACnBC,SAAU,IAOGC,MAJf,WAAoD,IAA/BC,EAA8B,uDAAtBH,EAC3B,OAAOG,GCAMC,EAFDC,YAAYH,GCIXI,EAPA,CACbC,KAAM,IACNC,OAAQ,UACRC,OAAQ,UACRC,QAAS,Y,OCFIC,gBCKAC,G,YAJG,WAChB,OAAO,4CCYMC,EAZG,WAChB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,cACb,yBAAKC,IAAI,2BAEX,kBAAC,EAAD,QCJSC,G,YAJG,WAChB,OAAO,4CCGMC,G,MAJK,WAClB,OAAO,uDCkBMC,EAfE,WACf,OACE,kBAAC,WAAD,KACE,gCACE,yBAAKJ,UAAU,kBAAf,kBACA,yBAAKA,UAAU,UAAf,YAEF,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAMd,EAAOC,KAAMc,UAAWL,EAAWM,MAAM,aAC5D,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAMd,EAAOI,QAASW,UAAWJ,EAAaK,MAAM,4BCmB1DC,MAzBf,WACE,OACE,kBAAC,IAAD,CAAUnB,MAAOA,GACf,yBAAKU,UAAU,OACb,kBAAC,IAAD,CAAQU,QAASC,GACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEN,OAAK,EACLC,KAAMd,EAAOE,OACba,UAAWR,EACXS,MAAM,WAER,kBAAC,IAAD,CACEH,OAAK,EACLC,KAAMd,EAAOC,KACbc,UAAWH,EACXI,MAAM,mBCdAI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d588f6f0.chunk.js","sourcesContent":["const initialState = {\r\n  app_type: [],\r\n};\r\n\r\nfunction rootReducer(state = initialState, action) {\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","const Routes = {\r\n  home: \"/\",\r\n  signin: \"/signin\",\r\n  signup: \"/signup\",\r\n  pending: \"/pending\",\r\n};\r\n\r\nexport default Routes;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import React from \"react\";\r\nimport \"./index.style.scss\";\r\n\r\nconst LoginForm = () => {\r\n  return <div>LoginForm</div>;\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport \"./index.style.scss\";\r\nimport LoginForm from \"../../components/LoginForm\";\r\n\r\nconst LoginPage = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"header\"></div>\r\n      <div className=\"login-logo\">\r\n        <img src=\"../../assets/logo.png\"></img>\r\n      </div>\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React from \"react\";\r\nimport \"./index.style.scss\";\r\n\r\nconst Dashboard = () => {\r\n  return <div>Dashboard</div>;\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport \"./index.style.scss\";\r\n\r\nconst PendingApps = () => {\r\n  return <div>Pending Applications</div>;\r\n};\r\n\r\nexport default PendingApps;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./index.style.scss\";\r\nimport Routes from \"../../constants/Routes\";\r\nimport Dashboard from \"../Dashboard\";\r\nimport PendingApps from \"../PendingApps\";\r\nimport { Route } from \"react-router-dom\";\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <Fragment>\r\n      <header>\r\n        <div className=\"profile-header\">Profile Header</div>\r\n        <div className=\"navbar\">Nav Bar</div>\r\n      </header>\r\n      <div className=\"body\">\r\n        <Route exact path={Routes.home} component={Dashboard} title=\"Dashboad\"></Route>\r\n        <Route exact path={Routes.pending} component={PendingApps} title=\"Pending Applications\"></Route>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Provider } from \"react-redux\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport store from \"./redux/service\";\nimport Routes from \"./constants/Routes\";\nimport History from \"./constants/History\";\nimport LoginPage from \"./pages/LoginPage\";\nimport MainPage from \"./pages/MainPage\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Router history={History}>\n          <Switch>\n            <Route\n              exact\n              path={Routes.signin}\n              component={LoginPage}\n              title=\"Log In\"\n            ></Route>\n            <Route\n              exact\n              path={Routes.home}\n              component={MainPage}\n              title=\"Dashboard\"\n            ></Route>\n          </Switch>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}